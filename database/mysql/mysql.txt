1、为什么mysql innodb的二级索引的叶节点使用的是主键，而不是物理地址
答：
1）叶节点使用的是主键时，但出现页分裂等造成数据物理迁移的时候，数据库只需要维护聚簇索引。
2）innoDB行的版本信息保存在主键中，所以二级索引默认加主键列

2、MySQL5.6之前，innodb靠索引过滤掉一部分数据，之后将剩下的数据返回给服务器层，这是服务器层才通过
where子句进一步过滤数据。

3、MySQL设计组合索引时，将最可能的范围查询放到最后，因为查询只能使用索引的最左前缀，直到遇到第一个范围查询列。第一个范围查询
列后的条件，要到服务器层过滤了。

4、一个过滤性不高的列，可以不用加入索引

5、高版本的MySQL能不能实现松散索引，即在索引上使用多个范围条件

6、比较以上的数据时，我们可以发现采用where...limit....性能基本稳定，受偏移量和行数的影响不大，而单纯采用limit的话，受偏移量的影响很大，当偏移量大到一定后性能开始大幅下降。不过在数据量不大的情况下，两者的区别不大。

　　所以应当先使用where等查询语句，配合limit使用，效率才高

　　ps：在sql语句中，limt关键字是最后才用到的。以下条件的出现顺序一般是：where->group by->having-order by->limit

7、172页走的是索引吗

8、一旦服务器处理完最后一个关联表，开始生成第一条结果时，mysql就开始向客户端逐步返回结果集了。


9、子查询中没有索引（MariaDB有索引），索引才有用关联查询代替子查询的说法，但是如果子查询行数少，在内存内，还是可以的。

10、只要是索引覆盖了，查询字段和where字段就可以在搜索引擎中对where条件过滤，而不是把数据返回到服务器端，在通过服务器端过滤！！
1)select * from products where actor='sean carrey' and title like '%apollo%';
2)select * from products join (select prod_id from products where actor='sean carrey' and title like %apollo%) as t1 on (t1.pro_id=products.prod_d);
3)select * from products where actor='sean carrey' and title like 'apollo%';
1)中先通过actor索引，返回数据到服务器端，在服务器端通过%apollo%过滤数据，做了回表查询。
2)直接通过actor,title,pro_id索引，通过覆盖索引，在索引中过滤%apollo%数据，直接返回客户端。
3)如果like 'apollo%'则可以直接使用actor,title索引。

但当，where条件过滤的少时，或索引过滤后没有多少值时，效果差不多

11、但数据量超大的时候，B-Tree索引就无法起作用了。除非是索引覆盖查询，否则数据库服务器需要根据索引扫描的结果回表，查询所有符合条件的记录，如果数据量巨大，将会产生大量随机I/O。

12、因为对互斥信号量的竞争，有时直接关闭查询缓存对读密集型应用有好处。如果希望提高系统并发，要对比打开和关闭查询缓存时的性能差异。




