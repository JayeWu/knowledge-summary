springcloud封装了一整套核心技术，可以方便的使用

使用代理服务来避免必须的跨域资源共享（Cross-Origin Resource Sharing）和所有的后端需要分别认证的问题。


//服务注册、服务发现
Eureka:云端负载均衡工具Eureka，填补了Amazon Web Services的大缺口。是针对中间层服务器的负载均衡。
	   实现服务注册、服务发现。


//服务消费、软负载均衡
restTemplate：服务直连模式，无法实现负载均衡

ribbon：是一个基于 HTTP 和 TCP 客户端的负载均衡器 它可以在客户端配置 ribbonServerList（服务端列表），然后轮询请求以实现均衡负载。

feign：feign内部也使用了ribbon做负载均衡。所以也是客户端负载均衡。 feign自身是一个声明式的伪http客户端，写起来更加思路清晰和方便。
	   fegin是一个采用基于接口的注解的编程方式，更加简便。
	
	
//API网关
NGINX：免费的、开源的、高性能的HTTP服务器和反向代理。同时也可以作为API网关。

Zuul：提供了认证、鉴权、限流、动态路由、监控、弹性、安全、负载均衡、协助单点压测、静态响应等。

Kong：专注于提供微服务API网关的管理平台，基于NGINX，扩展NGINX。

好处：
1）集合多个API
2）统一API入口
3）避免将内部信息泄露给外部
4）为微服务添加额外的安全层--系统权限控制，也在API网关层
5）支持混合通信协议
6）降低构建微服务的复杂性--在代码层隔离功能项，如权限控制
7）微服务模拟与虚拟化--可以是真实的API，也可以是虚拟的API
弊端：
1）在架构上需要额外考虑更多编排与管理
2）路由逻辑配置要进行统一的管理
3）可能引发单点故障--API网关就是一个独立的入口，会产生API网关单点故障，导致整个系统不可用

注：可以使用fallback来实现单点故障，转发到fallback下一个实例中，这个实例转发到另一个uri


//集中配置 
//服务端
spring.cloud.config.server.git.uri=""
spring.cloud.config.server.git.seachPaths=""
server.port=8888
//客户端
spring.cloud.config.profile=dev #开发环境
spring.cloud.config.uri="http://localhost:8888/" --好像这个设置没什么作用


//熔断与降级
熔断是指上游服务在调用下游服务时，因下游服务的种种问题，对调用链智能处理的手段
降级是指整体资源瓶颈时，一般业务暂停（优先保证核心业务）的一种处理手段

